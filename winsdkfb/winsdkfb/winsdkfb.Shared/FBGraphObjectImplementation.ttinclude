//------------------------------------------------------------------------------
//
// Copyright (c) 2015 Microsoft Corporation. All rights reserved.
//
// This code is licensed under the MIT License (MIT).
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//
//------------------------------------------------------------------------------
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//------------------------------------------------------------------------------
<#@ assembly name="System.Xml" #>
<#@ import namespace="System.Xml" #>
<#
    XmlDocument doc = new XmlDocument();
    doc.Load(classDefFile);

    XmlNode rootNode = doc.SelectSingleNode("class");

    string className = rootNode.Attributes["name"].Value;
    bool bindable = ((rootNode.Attributes["bindable"] != null) && rootNode.Attributes["bindable"].Value.Equals("yes"));
#>

#include "pch.h"
#include "<#= className #>.h"

using namespace winsdkfb;
using namespace winsdkfb::Graph;
using namespace winrt;
using namespace winrt::Windows::Data::Json;
using namespace winrt::Windows::Foundation::Collections;
<#  
    if (bindable)
    {
#>
using namespace winrt::Windows::ApplicationModel::Core;
using namespace winrt::Windows::UI::Xaml::Data;

<#
    }
#>

<#
    XmlNodeList props = rootNode.SelectNodes("property");
    for (int i = 0; i < props.Count; i++)
    {
        XmlNode prop = props[i];
        string propName = PropNameFor(prop);
        string varName = MemberNameFor(prop);
        string rtType = RTTypeFor(prop);
#>
<#= rtType #> <#= className #>::<#= propName #>()
{
    return <#= varName #>;
}
void <#= className #>::<#= propName #>(<#= rtType #> const& value)
{
    <#= varName #> = value;
<#
    if (bindable)
    {
#>
    NotifyPropertyChanged(L"<#= propName #>");
<#
    }
#>
}

<#
    }
#>
winrt::Windows::Foundation::IInspectable <#= className #>::FromJson(
    hstring const& JsonText 
    )
{
    auto result = winrt::make_self<<#= className #>>();
    int found = 0;
    JsonValue val{ nullptr };

    if (JsonValue::TryParse(JsonText, val))
    {
        if (val.ValueType() == JsonValueType::Object)
        {
            JsonObject obj = val.GetObject();
            for (auto&& current : obj)
            {
                winrt::hstring key = current.Key();
<#
    for (int i = 0; i < props.Count; i++)
    {
        XmlNode prop = props[i];
        string typeName = prop.Attributes["type"].Value;
        string propName = prop.Attributes["name"].Value;
        string classPropName = PropNameFor(prop);
        string gettor = GetterNameFor(typeName);
        string castPrefix = CastPrefixFor(typeName);
        string castSuffix = CastSuffixFor(typeName);
        string ifPrefix;
        if (i == 0)
        {
            ifPrefix = "if ";
        }
        else
        {
            ifPrefix = "else if";
        }
#>
                <#= ifPrefix #> (key == L"<#= propName #>")
                {
<#
        if (typeName.Equals("fbclass"))
        {
            string memberClassName = prop.Attributes["className"].Value;
            string memberClassType = RTTypeFor(prop);
#>
                    found++;
                    result-><#= classPropName #>(static_cast<<#= memberClassType #>>(<#= memberClassName #>::FromJson(current.Value().Stringify())));
<#
        }
        else
        {
#>
                    found++;
                    result-><#= classPropName #>(<#= castPrefix #>current.Value().<#= gettor #>()<#= castSuffix #>);
<#
        }
#>
                }
<#
    }
#>
            }
        }
    }
    return result.as<winrt::Windows::Foundation::IInspectable>();
}
<# 
    if (bindable)
    {
#>

void <#= className #>::NotifyPropertyChanged(
    hstring const& prop
    )
{
    CoreApplication::MainView->CoreWindow->Dispatcher->RunAsync(
        Windows::UI::Core::CoreDispatcherPriority::Normal, 
        ref new Windows::UI::Core::DispatchedHandler([this, prop]()
    {
        PropertyChangedEventArgs^ args = ref new PropertyChangedEventArgs(prop);
        PropertyChanged(this, args);
    }));
}
<#
    }
#>
<#@ include file="Utility.ttinclude" #>
